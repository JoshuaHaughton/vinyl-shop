// import { Dispatch } from "@reduxjs/toolkit";
// import { db } from "../../../firebase";
// import { cartActions } from "../../../store/cart";
// import { ReduxState } from "../../../types";
// import { NavigateFunction } from "react-router-dom";

// export const submitHandler = async (
//   e: React.FormEvent<HTMLFormElement>,
//   cart: ReduxState,
//   cartSubtotal: string | number,
//   cartTotal: string | number,
//   uid: string,
//   setProcessingPayment: React.Dispatch<React.SetStateAction<boolean>>,
//   setPaymentReceived: React.Dispatch<React.SetStateAction<boolean>>,
//   emailSubmitHandler: () => void,
//   firstNameSubmitHandler: () => void,
//   lastNameSubmitHandler: () => void,
//   companyNameSubmitHandler: () => void,
//   postalOrZipSubmitHandler: () => void,
//   citySubmitHandler: () => void,
//   provinceOrStateSubmitHandler: () => void,
//   countrySubmitHandler: () => void,
//   addressSubmitHandler: () => void,
//   unitSubmitHandler: () => void,
//   enteredEmailIsValid: boolean,
//   enteredFirstNameIsValid: boolean,
//   enteredLastNameIsValid: boolean,
//   enteredPostalOrZipIsValid: boolean,
//   enteredCityIsValid: boolean,
//   enteredCountryIsValid: boolean,
//   enteredProvinceOrStateIsValid: boolean,
//   enteredAddressIsValid: boolean,
//   enteredFirstName: string,
//   enteredLastName: string,
//   enteredEmail: string,
//   enteredCompanyName: string,
//   enteredAddress: string,
//   enteredUnit: string,
//   enteredCity: string,
//   enteredPostalOrZip: string,
//   enteredProvinceOrState: string,
//   enteredCountry: string,
//   resetFirstNameInput: () => void,
//   resetLastNameInput: () => void,
//   resetEmailInput: () => void,
//   resetCompanyNameInput: () => void,
//   resetAddressInput: () => void,
//   resetUnitInput: () => void,
//   resetPostalOrZipInput: () => void,
//   resetCityInput: () => void,
//   resetProvinceOrStateInput: () => void,
//   resetCountryInput: () => void,
//   dispatch: Dispatch,
//   navigate: NavigateFunction,


// ) => {
//   e.preventDefault();

//   console.log(cart, cartSubtotal, cartTotal);

//   //Set inputs as touched to validate inputs on submit
//   emailSubmitHandler();
//   firstNameSubmitHandler();
//   lastNameSubmitHandler();
//   companyNameSubmitHandler();
//   postalOrZipSubmitHandler();
//   citySubmitHandler();
//   provinceOrStateSubmitHandler();
//   countrySubmitHandler();
//   addressSubmitHandler();
//   unitSubmitHandler();

//   //If a field is invalid, cancel submission
//   if (
//     !enteredEmailIsValid ||
//     !enteredFirstNameIsValid ||
//     !enteredLastNameIsValid ||
//     !enteredPostalOrZipIsValid ||
//     !enteredCityIsValid ||
//     !enteredCountryIsValid ||
//     !enteredProvinceOrStateIsValid ||
//     !enteredAddressIsValid
//   ) {
//     return;
//   }

//   //If valid, continue

//   //Loading State for Checkout button
//   setProcessingPayment(true);

//   let timestamp = new Date().toDateString();
//   let deliveryDateSeconds = new Date().getTime() + 1209600000;
//   let deliveryDate = new Date(deliveryDateSeconds).toDateString();

//   let order = {
//     firstName: enteredFirstName,
//     lastName: enteredLastName,
//     email: enteredEmail,
//     companyName: enteredCompanyName || null,
//     address: enteredAddress,
//     unit: enteredUnit || null,
//     city: enteredCity,
//     postalOrZip: enteredPostalOrZip,
//     provinceOrState: enteredProvinceOrState,
//     country: enteredCountry,
//     subtotal: cartSubtotal,
//     total: cartTotal,
//     timestamp: new Date(new Date()).getTime(),
//     orderDate: timestamp,
//     deliveryDate: new Date(deliveryDate).toDateString(),
//     uid,
//     items: cart,
//   };

//   //Save order to firebase db then add orderId property that is the the id tthat firebase autogenerated
//   const savedOrder = await db
//     .collection("orders")
//     .add(order)
//     .then(async (docRef) => {
//       await docRef.set({ ...order, orderId: docRef.id });
//       return (await docRef.get()).data();
//     });

//   //End loading state
//   setProcessingPayment(false);

//   //Render payment cobfirmed notification to user
//   setPaymentReceived(true);

//   //Show notification for 2 seconds before resetting cart and navigating to the order confirmed page
//   setTimeout(() => {
//     dispatch(cartActions.resetCart());
//     setPaymentReceived(false);
//     resetFirstNameInput();
//     resetLastNameInput();
//     resetEmailInput();
//     resetCompanyNameInput();
//     resetAddressInput();
//     resetUnitInput();
//     resetPostalOrZipInput();
//     resetCityInput();
//     resetProvinceOrStateInput();
//     resetCountryInput();

//     navigate("/order-confirmation", { state: { order: savedOrder } });
//   }, 2000);
// };
